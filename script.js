// script.js (‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö db.json ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì + auto-fallback ‡πÑ‡∏õ‡∏¢‡∏±‡∏á mockUsers)

// API config
const API_BASE = 'http://localhost:3000';
const API_USERS_ENDPOINT = `${API_BASE}/users`;

// mockUsers ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö db.json ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (fallback)
const mockUsers = [
    { id: 1, username: 'admin', password: 'admin123' },
    { id: 2, username: 'user1', password: 'user123' },
    { id: 3, username: 'test', password: 'test1234' }
];

// DOM elements
const vulnerableBtn = document.getElementById('vulnerableBtn');
const secureBtn = document.getElementById('secureBtn');
const usernameInput = document.getElementById('username');
const passwordInput = document.getElementById('password');
const resultArea = document.getElementById('result');

// ‡∏ä‡πà‡∏ß‡∏¢‡∏´‡∏•‡∏ö HTML ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î XSS ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
function escapeHtml(str) {
    if (str === undefined || str === null) return '';
    return String(str)
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#39;');
}

function showResult(html, type = 'info') {
    resultArea.innerHTML = html;
    resultArea.className = `result-area ${type}`;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
function renderUserData(data) {
    if (!data) return '';
    if (Array.isArray(data)) {
        if (data.length === 0) return '<i>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</i>';
        return '<b>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö:</b><br>' + data.map(u =>
            `- ID: ${escapeHtml(u.id)} , ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${escapeHtml(u.username)} , ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô: ${escapeHtml(u.password)}`
        ).join('<br>');
    } else {
        return `<b>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:</b> ${escapeHtml(JSON.stringify(data, null, 2))}`;
    }
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö SQL Injection ‡πÅ‡∏ö‡∏ö heuristic ‡∏á‡πà‡∏≤‡∏¢‡πÜ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏ò‡∏¥‡∏ï)
function detectSqlInjection(input) {
    if (!input) return false;
    const lowered = input.toLowerCase();
    return (
        input.includes("'") ||
        lowered.includes(" or ") ||
        lowered.includes(" and ") ||
        lowered.includes("--") ||
        lowered.includes(";")
    );
}

/* ---------- API reachability & fetch helpers ---------- */
let useApi = false;

async function testApiReachable() {
    try {
        const resp = await fetch(API_USERS_ENDPOINT, { method: 'HEAD' });
        if (resp.ok) {
            useApi = true;
            console.info('[script] json-server detected, using API:', API_USERS_ENDPOINT);
            return true;
        }
    } catch (err) {
        console.info('[script] json-server not reachable ‚Äî using mockUsers.');
    }
    useApi = false;
    return false;
}

async function fetchAllUsers() {
    if (useApi) {
        const res = await fetch(API_USERS_ENDPOINT);
        if (!res.ok) throw new Error(`API returned ${res.status}`);
        return await res.json();
    } else {
        return mockUsers.slice();
    }
}

async function fetchUserByCredentials(username, password) {
    if (useApi) {
        const url = new URL(API_USERS_ENDPOINT);
        url.searchParams.append('username', username);
        url.searchParams.append('password', password);
        const res = await fetch(url.toString());
        if (!res.ok) throw new Error(`API returned ${res.status}`);
        return await res.json(); // array
    } else {
        return mockUsers.filter(u => u.username === username && u.password === password);
    }
}

/* ---------- Vulnerable & Secure simulations ---------- */
async function runVulnerable(username, password) {
    try {
        const query = `SELECT * FROM users WHERE username = '${username}' AND password = '${password}'`;
        const hasInjection = detectSqlInjection(username) || detectSqlInjection(password);
        const isClassicOR = (username.includes("' OR '1'='1") || password.includes("' OR '1'='1"));

        const users = await fetchAllUsers();

        if (hasInjection && isClassicOR) {
            const html =
                `<div class="result-header">üî¥ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏£‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà:</div><br>` +
                `<b>‡∏Ñ‡∏¥‡∏ß‡∏£‡∏µ:</b> ${escapeHtml(query)}<br><br>` +
                `<b>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</b> ‚ö†Ô∏è ‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà: SQL Injection ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (‡∏à‡∏≥‡∏•‡∏≠‡∏á)<br><br>` +
                `${renderUserData(users)}`;
            showResult(html, 'error');
            return;
        }

        // ‡∏õ‡∏Å‡∏ï‡∏¥: ‡∏´‡∏≤ match
        const matched = (await fetchUserByCredentials(username, password))[0] ?? null;

        const html =
            `<div class="result-header">üî¥ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏£‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà:</div><br>` +
            `<b>‡∏Ñ‡∏¥‡∏ß‡∏£‡∏µ:</b> ${escapeHtml(query)}<br><br>` +
            `<b>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</b> ${matched ? '‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‚ùå ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'}<br><br>` +
            (matched ? renderUserData(matched) : '');
        showResult(html, matched ? 'success' : 'error');

    } catch (err) {
        showResult(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${escapeHtml(err.message)}`, 'error');
    }
}

async function runSecure(username, password) {
    try {
        const query = `SELECT * FROM users WHERE username = ? AND password = ?`;
        const results = await fetchUserByCredentials(username, password);
        const success = Array.isArray(results) && results.length > 0;

        const html =
            `<div class="result-header">üü¢ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏£‡∏µ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢:</div><br>` +
            `<b>‡∏Ñ‡∏¥‡∏ß‡∏£‡∏µ:</b> ${escapeHtml(query)}<br>` +
            `<b>‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå:</b> [${escapeHtml(username)}, ${escapeHtml(password)}]<br><br>` +
            `<b>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</b> ${success ? '‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)' : '‚ùå ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)'}<br><br>` +
            (success ? renderUserData(results[0]) : '');
        showResult(html, success ? 'success' : 'error');
    } catch (err) {
        showResult(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${escapeHtml(err.message)}`, 'error');
    }
}

/* ---------- Event wiring ---------- */
function resetResult() {
    showResult('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏Ñ‡∏¥‡∏ß‡∏£‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏Ñ‡∏¥‡∏ß‡∏£‡∏µ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"', 'info');
}

document.addEventListener('DOMContentLoaded', async () => {
    await testApiReachable();

    if (!usernameInput.value) usernameInput.placeholder = "‡∏•‡∏≠‡∏á‡πÉ‡∏™‡πà: admin' OR '1'='1' --";

    usernameInput.addEventListener('input', resetResult);
    passwordInput.addEventListener('input', resetResult);

    vulnerableBtn.addEventListener('click', async () => {
        const username = usernameInput.value.trim();
        const password = passwordInput.value.trim();
        if (!username || !password) {
            showResult('‚ùó ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô', 'error');
            return;
        }
        if (detectSqlInjection(username) || detectSqlInjection(password)) {
            showResult('‚ö†Ô∏è ‡∏û‡∏ö pattern ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô SQL Injection ‚Äî ‡∏à‡∏∞‡∏£‡∏±‡∏ô query ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏ò‡∏¥‡∏ï...', 'warning');
            setTimeout(() => runVulnerable(username, password), 600);
        } else {
            await runVulnerable(username, password);
        }
    });

    secureBtn.addEventListener('click', async () => {
        const username = usernameInput.value.trim();
        const password = passwordInput.value.trim();
        if (!username || !password) {
            showResult('‚ùó ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô', 'error');
            return;
        }
        await runSecure(username, password);
    });

    // keyboard shortcuts
    document.addEventListener('keydown', (e) => {
        if (e.ctrlKey && e.key === '1') {
            e.preventDefault();
            vulnerableBtn.click();
        } else if (e.ctrlKey && e.key === '2') {
            e.preventDefault();
            secureBtn.click();
        }
    });

    resetResult();
});
